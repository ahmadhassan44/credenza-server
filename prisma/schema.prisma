// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Creator {
  id                   String                     @id @default(uuid())
  name                 String
  email                String                     @unique
  platforms            Platform[]
  creditScores         CreditScore[]
  user                 User?                      @relation(fields: [userId], references: [id])
  userId               String?                    @unique
  contentCategory      SuperCategory              @default(COMPUTER_SCIENCE_TECH)
  geographicLocationId String?
  geographicLocation   CreatorGeographicLocation? @relation(fields: [geographicLocationId], references: [id])
  lifecycleStage       LifecycleStage             @default(NEW)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
}

model Platform {
  id        String   @id @default(uuid())
  type      String // YOUTUBE, PATREON, INSTAGRAM
  handle    String
  creatorId String
  creator   Creator  @relation(fields: [creatorId], references: [id])
  metrics   Metric[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Metric {
  id         String   @id @default(uuid())
  platformId String
  platform   Platform @relation(fields: [platformId], references: [id])
  type       String // FOLLOWERS, VIEWS, EARNINGS
  value      Float
  timestamp  DateTime @default(now())
}

model CreditScore {
  id             String          @id @default(uuid())
  creatorId      String
  creator        Creator         @relation(fields: [creatorId], references: [id])
  score          Int // Overall credit score (0-100)
  platformScores PlatformScore[]
  timestamp      DateTime        @default(now())
}

model PlatformScore {
  id            String      @id @default(uuid())
  creditScoreId String
  creditScore   CreditScore @relation(fields: [creditScoreId], references: [id], onDelete: Cascade)
  platformId    String
  platformType  String
  score         Int // Platform-specific score (0-100)
  factors       Json // Array of scoring factors with weights
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role           @default(USER)
  creator       Creator?
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  USER
  CREATOR
  ADMIN
}

enum SuperCategory {
  KNOWLEDGE_LEARNING
  BUSINESS_FINANCE
  COMPUTER_SCIENCE_TECH
  ARTS_CREATIVITY
  ENTERTAINMENT_MEDIA
  GAMING_INTERACTIVE
  MUSIC_AUDIO
  HEALTH_WELLNESS
  LIFESTYLE_PERSONAL
  SOCIETY_CULTURE
  REVIEWS_PRODUCTS
}

model CreatorGeographicLocation {
  id            String    @id @default(uuid())
  countryCode   String    @unique
  countryName   String
  region        String?
  currency      String
  averageCpmUsd Float
  language      String?
  timezone      String?
  creatorId     String    @unique
  Creator       Creator[]
}

enum LifecycleStage {
  NEW // Just started, low data, low revenue, high volatility
  GROWTH // Rapidly increasing audience and income
  STABLE // Consistent views and revenue over time
  DECLINE // Decreasing engagement, possibly losing relevance
  INACTIVE // No recent activity, income mostly residual
}
